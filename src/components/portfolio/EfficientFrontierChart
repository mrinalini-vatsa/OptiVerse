import { Card } from '@/components/ui/card';
import { ResponsiveContainer, ScatterChart, Scatter, XAxis, YAxis, CartesianGrid, Tooltip, ReferenceDot } from 'recharts';
import { PortfolioMetrics, EfficientFrontierPoint } from '@/lib/portfolio';
import { TrendingUp } from 'lucide-react';

interface EfficientFrontierChartProps {
  frontierData: EfficientFrontierPoint[];
  optimizedPoint: PortfolioMetrics;
}

export const EfficientFrontierChart = ({ frontierData, optimizedPoint }: EfficientFrontierChartProps) => {
  const formatTooltip = (value: number, name: string) => {
    if (name === 'return' || name === 'volatility') {
      return [`${(value * 100).toFixed(2)}%`, name === 'return' ? 'Expected Return' : 'Volatility'];
    }
    return [value.toFixed(3), 'Sharpe Ratio'];
  };

  const CustomTooltip = ({ active, payload }: any) => {
    if (active && payload && payload.length) {
      const data = payload[0].payload;
      return (
        <div className="bg-card border border-border rounded-lg p-3 shadow-lg">
          <div className="space-y-1 text-sm">
            <div className="flex justify-between gap-4">
              <span className="text-muted-foreground">Return:</span>
              <span className="font-semibold text-success">{(data.return * 100).toFixed(2)}%</span>
            </div>
            <div className="flex justify-between gap-4">
              <span className="text-muted-foreground">Volatility:</span>
              <span className="font-semibold text-warning">{(data.volatility * 100).toFixed(2)}%</span>
            </div>
            <div className="flex justify-between gap-4">
              <span className="text-muted-foreground">Sharpe Ratio:</span>
              <span className="font-semibold text-primary">{data.sharpeRatio.toFixed(3)}</span>
            </div>
          </div>
        </div>
      );
    }
    return null;
  };

  return (
    <Card className="p-6">
      <div className="flex items-center justify-between mb-6">
        <h3 className="text-lg font-semibold flex items-center space-x-2">
          <TrendingUp className="h-5 w-5 text-primary" />
          <span>Efficient Frontier</span>
        </h3>
        <div className="flex items-center space-x-4 text-sm">
          <div className="flex items-center space-x-2">
            <div className="w-3 h-3 bg-chart-1 rounded-full"></div>
            <span className="text-muted-foreground">Efficient Portfolios</span>
          </div>
          <div className="flex items-center space-x-2">
            <div className="w-3 h-3 bg-chart-2 rounded-full"></div>
            <span className="text-muted-foreground">Optimal Portfolio</span>
          </div>
        </div>
      </div>
      
      <ResponsiveContainer width="100%" height={400}>
        <ScatterChart margin={{ top: 20, right: 20, bottom: 20, left: 20 }}>
          <CartesianGrid strokeDasharray="3 3" className="opacity-30" />
          <XAxis 
            type="number" 
            dataKey="volatility"
            domain={['dataMin - 0.01', 'dataMax + 0.01']}
            tickFormatter={(value) => `${(value * 100).toFixed(1)}%`}
            label={{ value: 'Volatility (Annual)', position: 'insideBottom', offset: -10 }}
          />
          <YAxis 
            type="number" 
            dataKey="return"
            domain={['dataMin - 0.01', 'dataMax + 0.01']}
            tickFormatter={(value) => `${(value * 100).toFixed(1)}%`}
            label={{ value: 'Expected Return (Annual)', angle: -90, position: 'insideLeft' }}
          />
          <Tooltip content={<CustomTooltip />} />
          
          {/* Efficient Frontier */}
          <Scatter 
            name="Efficient Frontier" 
            data={frontierData} 
            fill="hsl(var(--chart-1))"
            strokeWidth={2}
            r={4}
          />
          
          {/* Optimal Portfolio Point */}
          <ReferenceDot 
            x={optimizedPoint.volatility} 
            y={optimizedPoint.expectedReturn}
            r={8}
            fill="hsl(var(--chart-2))"
            stroke="hsl(var(--background))"
            strokeWidth={3}
            label={{
              value: "Optimal",
              position: "top",
              className: "text-xs font-semibold"
            }}
          />
        </ScatterChart>
      </ResponsiveContainer>
      
      <div className="mt-4 p-4 bg-muted/30 rounded-lg">
        <p className="text-sm text-muted-foreground">
          The efficient frontier represents the set of optimal portfolios offering the highest expected return for each level of risk. 
          The highlighted point shows your optimized portfolio with maximum Sharpe ratio.
        </p>
      </div>
    </Card>
  );
};
